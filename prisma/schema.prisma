// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  surname           String
  email             String   @unique
  profilePictureUrl String?
  backgroungUrl     String?
  password          String
  createdAt         DateTime @default(now())

  posts    Post[]
  comments Comment[]
  likes    Like[]
  friends  Friendship[] @relation(name: "friends_users")
  friendOf Friendship[] @relation(name: "friend_of_users")
  sentRequests     FriendRequest[] @relation(name: "sent_requests")
  receivedRequests FriendRequest[] @relation(name: "received_requests")
}

model Post {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  text      String
  imageUrl  String?
  createdAt DateTime @default(now())

  likes    Like[]
  comments Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, ownerId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(name: "friends_users", fields: [userId], references: [id])
  friendId  Int
  friend    User     @relation(name: "friend_of_users", fields: [friendId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  senderId    Int
  sender      User     @relation(name: "sent_requests", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User     @relation(name: "received_requests", fields: [receiverId], references: [id])
  status      String   @default("pending")
  createdAt   DateTime @default(now())

  @@unique([senderId, receiverId])
}